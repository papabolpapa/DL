# Object Detection using Transfer Learning on Food Dataset
# Make sure you have TensorFlow and Keras installed
# pip install tensorflow keras

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras import layers, models
from tensorflow.keras.applications import VGG16

# Step 1: Load Dataset (Food Dataset should be organized in folders by class)
train_dir = "dataset/food/train"
val_dir   = "dataset/food/validation"

# Step 2: Data Augmentation & Preprocessing
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode="nearest"
)

val_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode="categorical"
)

val_generator = val_datagen.flow_from_directory(
    val_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode="categorical"
)

# Step 3: Load Pretrained Model (VGG16 for Transfer Learning)
base_model = VGG16(weights="imagenet", include_top=False, input_shape=(224,224,3))

# Freeze base layers
for layer in base_model.layers:
    layer.trainable = False

# Step 4: Add Custom Layers for Food Classification
model = models.Sequential([
    base_model,
    layers.Flatten(),
    layers.Dense(256, activation="relu"),
    layers.Dropout(0.5),
    layers.Dense(train_generator.num_classes, activation="softmax")
])

# Step 5: Compile Model
model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001),
              loss="categorical_crossentropy",
              metrics=["accuracy"])

# Step 6: Train Model
history = model.fit(
    train_generator,
    epochs=10,
    validation_data=val_generator
)

# Step 7: Fine-Tuning (optional: unfreeze some layers and retrain with small learning rate)
for layer in base_model.layers[-4:]:
    layer.trainable = True

model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=1e-5),
              loss="categorical_crossentropy",
              metrics=["accuracy"])

history_finetune = model.fit(
    train_generator,
    epochs=5,
    validation_data=val_generator
)

# Step 8: Save Model
model.save("food_transfer_learning.h5")
print("Model saved as food_transfer_learning.h5")
