# assignment3_cifar_ffnn.py
# !pip install --quiet tensorflow matplotlib scikit-learn

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Flatten
from tensorflow.keras.optimizers import SGD, Adam
from sklearn.metrics import classification_report

# ---------- Load CIFAR-10 ----------
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data()
print("Train:", x_train.shape, " Test:", x_test.shape)

# Normalize to [0,1]
x_train = x_train.astype("float32") / 255.0
x_test = x_test.astype("float32") / 255.0

# Flatten (32x32x3 â†’ 3072)
x_train = x_train.reshape((x_train.shape[0], -1))
x_test = x_test.reshape((x_test.shape[0], -1))

# One-hot labels
y_train_cat = tf.keras.utils.to_categorical(y_train, 10)
y_test_cat = tf.keras.utils.to_categorical(y_test, 10)

# ---------- Build model ----------
model = Sequential([
    Dense(1024, activation='relu', input_shape=(3072,)),
    Dropout(0.5),
    Dense(512, activation='relu'),
    Dropout(0.3),
    Dense(10, activation='softmax')
])

model.compile(optimizer=Adam(0.001), 
              loss="categorical_crossentropy", 
              metrics=["accuracy"])
model.summary()

# ---------- Train ----------
history = model.fit(x_train, y_train_cat, validation_split=0.15,
                    epochs=20, batch_size=128, verbose=2)

# ---------- Evaluate ----------
loss, acc = model.evaluate(x_test, y_test_cat, verbose=0)
print(f"\nTest accuracy: {acc*100:.2f}%")

preds = model.predict(x_test, batch_size=128)
print("\nClassification Report:")
print(classification_report(y_test, preds.argmax(axis=1), digits=4))

# ---------- Plot ----------
plt.figure(figsize=(10,4))
plt.subplot(1,2,1)
plt.plot(history.history['loss'], label='train_loss')
plt.plot(history.history['val_loss'], label='val_loss')
plt.xlabel('Epoch'); plt.ylabel('Loss'); plt.legend()
plt.title("Loss")

plt.subplot(1,2,2)
plt.plot(history.history['accuracy'], label='train_acc')
plt.plot(history.history['val_accuracy'], label='val_acc')
plt.xlabel('Epoch'); plt.ylabel('Accuracy'); plt.legend()
plt.title("Accuracy")

plt.tight_layout()
plt.savefig("cifar_ffnn_history.png")
plt.show()
