# assignment6_food_cnn.py
# !pip install --quiet tensorflow matplotlib

import tensorflow as tf
import matplotlib.pyplot as plt
import os

# --------- Dataset path (update if needed) ---------
base_dir = "food"

train_dir = os.path.join(base_dir, "train")
test_dir  = os.path.join(base_dir, "test")

# --------- Image Generators ---------
img_size = (128, 128)
batch_size = 64

train_gen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255,
                                                            rotation_range=20,
                                                            zoom_range=0.2,
                                                            horizontal_flip=True,
                                                            validation_split=0.2)

train_data = train_gen.flow_from_directory(train_dir, target_size=img_size,
                                           batch_size=batch_size, subset="training")
val_data   = train_gen.flow_from_directory(train_dir, target_size=img_size,
                                           batch_size=batch_size, subset="validation")
test_gen   = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255)
test_data  = test_gen.flow_from_directory(test_dir, target_size=img_size,
                                          batch_size=batch_size)

num_classes = train_data.num_classes
print(f"Detected {num_classes} food categories.")

# --------- CNN Model ---------
model = tf.keras.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation="relu", input_shape=(128,128,3)),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(64, (3,3), activation="relu"),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(128, (3,3), activation="relu"),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(256, activation="relu"),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(num_classes, activation="softmax")
])

model.compile(optimizer="adam", loss="categorical_crossentropy", metrics=["accuracy"])
model.summary()

# --------- Train ---------
history = model.fit(train_data, epochs=15, validation_data=val_data)

# --------- Evaluate ---------
loss, acc = model.evaluate(test_data)
print(f"\nTest Accuracy: {acc*100:.2f}%")

# --------- Plot ---------
plt.figure(figsize=(10,4))
plt.subplot(1,2,1)
plt.plot(history.history["loss"], label="train_loss")
plt.plot(history.history["val_loss"], label="val_loss")
plt.legend(); plt.title("Loss")
plt.subplot(1,2,2)
plt.plot(history.history["accuracy"], label="train_acc")
plt.plot(history.history["val_accuracy"], label="val_acc")
plt.legend(); plt.title("Accuracy")
plt.show()
