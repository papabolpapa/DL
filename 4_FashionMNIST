# assignment4_fashionmnist_cnn.py
# !pip install --quiet tensorflow matplotlib scikit-learn

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense
from sklearn.metrics import classification_report

# ---------- Load Fashion MNIST ----------
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.fashion_mnist.load_data()
print("Train:", x_train.shape, " Test:", x_test.shape)

# Reshape for CNN (28x28 â†’ (28,28,1))
x_train = x_train.reshape((-1,28,28,1)).astype("float32") / 255.0
x_test = x_test.reshape((-1,28,28,1)).astype("float32") / 255.0

# One-hot encode labels
y_train_cat = tf.keras.utils.to_categorical(y_train, 10)
y_test_cat = tf.keras.utils.to_categorical(y_test, 10)

# ---------- Build CNN ----------
model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),
    MaxPooling2D(pool_size=(2,2)),
    Dropout(0.25),

    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(pool_size=(2,2)),
    Dropout(0.25),

    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(10, activation='softmax')
])

model.compile(optimizer="adam", loss="categorical_crossentropy", metrics=["accuracy"])
model.summary()

# ---------- Train ----------
history = model.fit(x_train, y_train_cat, validation_split=0.1,
                    epochs=15, batch_size=128, verbose=2)

# ---------- Evaluate ----------
loss, acc = model.evaluate(x_test, y_test_cat, verbose=0)
print(f"\nTest accuracy: {acc*100:.2f}%")

preds = model.predict(x_test, batch_size=128)
print("\nClassification Report:")
print(classification_report(y_test, preds.argmax(axis=1), digits=4))

# ---------- Plot ----------
plt.figure(figsize=(10,4))
plt.subplot(1,2,1)
plt.plot(history.history['loss'], label='train_loss')
plt.plot(history.history['val_loss'], label='val_loss')
plt.xlabel('Epoch'); plt.ylabel('Loss'); plt.legend()
plt.title("Loss")

plt.subplot(1,2,2)
plt.plot(history.history['accuracy'], label='train_acc')
plt.plot(history.history['val_accuracy'], label='val_acc')
plt.xlabel('Epoch'); plt.ylabel('Accuracy'); plt.legend()
plt.title("Accuracy")

plt.tight_layout()
plt.savefig("fashionmnist_cnn_history.png")
plt.show()
