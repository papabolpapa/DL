# assignment11_denoising_autoencoder.py
# !pip install --quiet tensorflow matplotlib numpy

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

# ---------- Load MNIST ----------
(x_train, _), (x_test, _) = tf.keras.datasets.mnist.load_data()
x_train = x_train.astype("float32") / 255.
x_test  = x_test.astype("float32") / 255.

# Reshape for CNN autoencoder
x_train = np.expand_dims(x_train, -1)  # (60000,28,28,1)
x_test  = np.expand_dims(x_test, -1)

# ---------- Add Noise ----------
noise_factor = 0.5
x_train_noisy = x_train + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_train.shape)
x_test_noisy  = x_test + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_test.shape)

x_train_noisy = np.clip(x_train_noisy, 0., 1.)
x_test_noisy  = np.clip(x_test_noisy, 0., 1.)

# ---------- Autoencoder Model ----------
input_img = tf.keras.layers.Input(shape=(28,28,1))

# Encoder
x = tf.keras.layers.Conv2D(32, (3,3), activation="relu", padding="same")(input_img)
x = tf.keras.layers.MaxPooling2D((2,2), padding="same")(x)
x = tf.keras.layers.Conv2D(32, (3,3), activation="relu", padding="same")(x)
encoded = tf.keras.layers.MaxPooling2D((2,2), padding="same")(x)

# Decoder
x = tf.keras.layers.Conv2D(32, (3,3), activation="relu", padding="same")(encoded)
x = tf.keras.layers.UpSampling2D((2,2))(x)
x = tf.keras.layers.Conv2D(32, (3,3), activation="relu", padding="same")(x)
x = tf.keras.layers.UpSampling2D((2,2))(x)
decoded = tf.keras.layers.Conv2D(1, (3,3), activation="sigmoid", padding="same")(x)

autoencoder = tf.keras.Model(input_img, decoded)
autoencoder.compile(optimizer="adam", loss="binary_crossentropy")
autoencoder.summary()

# ---------- Train ----------
history = autoencoder.fit(x_train_noisy, x_train,
                          epochs=10,
                          batch_size=128,
                          shuffle=True,
                          validation_data=(x_test_noisy, x_test))

# ---------- Predict ----------
decoded_imgs = autoencoder.predict(x_test_noisy[:10])

# ---------- Plot Results ----------
n = 10
plt.figure(figsize=(20,6))

for i in range(n):
    # Noisy
    ax = plt.subplot(3, n, i+1)
    plt.imshow(x_test_noisy[i].reshape(28,28), cmap="gray")
    plt.title("Noisy"); plt.axis("off")

    # Denoised
    ax = plt.subplot(3, n, i+1+n)
    plt.imshow(decoded_imgs[i].reshape(28,28), cmap="gray")
    plt.title("Denoised"); plt.axis("off")

    # Original
    ax = plt.subplot(3, n, i+1+2*n)
    plt.imshow(x_test[i].reshape(28,28), cmap="gray")
    plt.title("Original"); plt.axis("off")

plt.suptitle("Denoising Autoencoder Results", fontsize=16)
plt.show()
