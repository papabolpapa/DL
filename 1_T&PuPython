# assignment1_tf_pytorch.py
# Run: python assignment1_tf_pytorch.py  (or copy cells to Colab)

# ---------- Setup (uncomment/install if running in a fresh environment) ----------
# !pip install --quiet tensorflow torch torchvision

# ---------- TensorFlow example: Linear regression ----------
import numpy as np
import tensorflow as tf

print("== TensorFlow linear regression example ==")

# Create synthetic data: y = 2x + 1 + noise
rng = np.random.RandomState(42)
x = rng.uniform(-1, 1, (200, 1)).astype(np.float32)
y = (2.0 * x + 1.0 + rng.normal(scale=0.1, size=(200, 1))).astype(np.float32)

# Define a tiny model with tf.keras
tf.random.set_seed(42)
model_tf = tf.keras.Sequential([
    tf.keras.layers.Dense(1, input_shape=(1,))
])
model_tf.compile(optimizer=tf.keras.optimizers.SGD(learning_rate=0.1),
                 loss='mse')

# Train
history = model_tf.fit(x, y, epochs=100, batch_size=16, verbose=0)
w, b = model_tf.layers[0].get_weights()
print(f"Learned parameters: weight={w.ravel()[0]:.4f}, bias={b.ravel()[0]:.4f}")
print("Expected ~ weight=2.0 bias=1.0\n")

# ---------- PyTorch example: small classifier ----------
print("== PyTorch simple classifier example ==")
import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.datasets import make_moons
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Create a small classification dataset
X, Y = make_moons(n_samples=400, noise=0.15, random_state=42)
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.25, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train).astype(np.float32)
X_test  = scaler.transform(X_test).astype(np.float32)

# Convert to tensors
tX_train = torch.tensor(X_train)
tY_train = torch.tensor(y_train).long()
tX_test  = torch.tensor(X_test)
tY_test  = torch.tensor(y_test).long()

# Define model
class SimpleNet(nn.Module):
    def __init__(self):
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(2, 16),
            nn.ReLU(),
            nn.Linear(16, 2)
        )
    def forward(self, x):
        return self.net(x)

torch.manual_seed(42)
model_torch = SimpleNet()
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model_torch.parameters(), lr=0.01)

# Train
epochs = 120
for epoch in range(epochs):
    optimizer.zero_grad()
    outputs = model_torch(tX_train)
    loss = criterion(outputs, tY_train)
    loss.backward()
    optimizer.step()

# Evaluate
with torch.no_grad():
    preds = model_torch(tX_test).argmax(dim=1)
    acc = (preds == tY_test).float().mean().item()
print(f"PyTorch classifier test accuracy: {acc*100:.2f}%")
